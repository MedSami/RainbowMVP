package com.ne1c.rainbowmvp.processor;

import com.ne1c.rainbowmvp.annotaions.PresenterTag;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;
import com.sun.source.util.Trees;
import com.sun.tools.javac.code.Type;
import com.sun.tools.javac.processing.JavacProcessingEnvironment;
import com.sun.tools.javac.tree.JCTree;
import com.sun.tools.javac.tree.TreeMaker;
import com.sun.tools.javac.util.Names;

import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import javax.tools.Diagnostic;

// Run for debug: ./gradlew --no-daemon -Dorg.gradle.debug=true :sample:clean :sample:compileDebugJavaWithJavac

public class PresenterTagProcessor extends AbstractProcessor {
    private Messager messager;
    private Filer filer;
    private TreeMaker treeMaker;
    private Trees trees;
    private Names names;

    @Override
    public synchronized void init(ProcessingEnvironment env) {
        super.init(env);

        trees = Trees.instance(env);
        messager = env.getMessager();
        filer = env.getFiler();

        JavacProcessingEnvironment javacEnv = (JavacProcessingEnvironment) env;
        treeMaker = TreeMaker.instance(javacEnv.getContext());
        names = Names.instance(javacEnv.getContext());
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for (Element e : roundEnv.getElementsAnnotatedWith(PresenterTag.class)) {
            if (e.getKind() != ElementKind.CLASS) {
                messager.printMessage(Diagnostic.Kind.ERROR, "Can be applied only to class.");
                return true;
            }

            String presenterTag = e.getAnnotation(PresenterTag.class).value();

            MethodSpec getPresenterTagMethod = MethodSpec.methodBuilder("getPresenterTag")
                    .addModifiers(Modifier.PUBLIC)
                    .addAnnotation(Override.class)
                    .returns(String.class)
                    .addStatement("return $S", presenterTag)
                    .build();

            TypeMirror baseActivity = ((TypeElement) e).getSuperclass();
            String baseActivityPath = "com.ne1c.rainbowmvp.base.BaseActivity";

            if (!((Type.ClassType) baseActivity).asElement().toString().equals(baseActivityPath)) {
                messager.printMessage(Diagnostic.Kind.ERROR,
                        "Can be annotated only classes that inherit com.ne1c.rainbowmvp.base.BaseActivity");
            }

            TypeSpec typeSpec = TypeSpec.classBuilder(e.getSimpleName().toString() + "$$PresenterTagProxy")
                        .addModifiers(Modifier.PUBLIC)
                        .addMethod(getPresenterTagMethod)
                        .superclass(ParameterizedTypeName.get(baseActivity))
                        .build();

            JavaFile javaFile = JavaFile.builder(e.getEnclosingElement().toString(), typeSpec)
                    .addFileComment("Generated by RainbowMVP processor, don't modify")
                    .build();

            try {
                javaFile.writeTo(filer);

                JCTree.JCExpression selector = treeMaker.Ident(names.fromString(javaFile.packageName));
                selector = treeMaker.Select(selector, names.fromString(typeSpec.name));
                ((JCTree.JCClassDecl) trees.getTree(e)).extending = selector;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        return true;
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> annotations = new LinkedHashSet<>();
        annotations.add(PresenterTag.class.getCanonicalName());
        return annotations;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }
}
